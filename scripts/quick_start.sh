#!/bin/bash

# üöÄ Colombia Explora - Quick Start Script
# Este script automatiza la configuraci√≥n inicial del proyecto

set -e  # Exit on error

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo ""
echo "============================================"
echo -e "${BLUE}üèîÔ∏è  Colombia Explora - Quick Start${NC}"
echo "============================================"
echo ""

# Funci√≥n para imprimir pasos
step() {
    echo -e "${GREEN}‚ñ∫${NC} $1"
}

# Funci√≥n para imprimir advertencias
warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Funci√≥n para imprimir errores
error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Verificar Docker
step "Verificando Docker..."
if ! command -v docker &> /dev/null; then
    error "Docker no est√° instalado. Por favor instala Docker primero."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose no est√° instalado. Por favor instala Docker Compose primero."
    exit 1
fi

echo "  ‚úì Docker $(docker --version)"
echo "  ‚úì Docker Compose $(docker-compose --version)"
echo ""

# Verificar si .env existe
step "Verificando configuraci√≥n de entorno..."
if [ ! -f .env ]; then
    warn ".env no existe. Creando desde .env.example..."
    cp .env.example .env
    echo "  ‚úì .env creado. Rev√≠salo y actualiza los valores si es necesario."
else
    echo "  ‚úì .env ya existe"
fi
echo ""

# Detener contenedores existentes
step "Deteniendo contenedores existentes (si los hay)..."
docker-compose down 2>/dev/null || true
echo ""

# Limpiar vol√∫menes antiguos (opcional)
read -p "¬øDeseas resetear la base de datos? Esto borrar√° todos los datos. (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    step "Limpiando datos de PostgreSQL..."
    sudo rm -rf data/postgres 2>/dev/null || true
    echo "  ‚úì Base de datos limpiada"
fi
echo ""

# Construir im√°genes
step "Construyendo im√°genes Docker (esto puede tomar varios minutos)..."
docker-compose build
echo ""

# Iniciar servicios
step "Iniciando servicios..."
docker-compose up -d
echo ""

# Esperar a que los servicios est√©n listos
step "Esperando a que los servicios inicien..."
sleep 8

# Verificar salud de los servicios
step "Verificando estado de los servicios..."
echo ""

# Health checks
auth_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/health 2>/dev/null || echo "000")
api_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health 2>/dev/null || echo "000")
frontend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4200 2>/dev/null || echo "000")

if [ "$auth_status" = "200" ]; then
    echo -e "  ${GREEN}‚úì${NC} Auth Service     ‚Üí http://localhost:8001"
else
    echo -e "  ${RED}‚úó${NC} Auth Service     ‚Üí FAIL (HTTP $auth_status)"
fi

if [ "$api_status" = "200" ]; then
    echo -e "  ${GREEN}‚úì${NC} API Service      ‚Üí http://localhost:8000"
else
    echo -e "  ${RED}‚úó${NC} API Service      ‚Üí FAIL (HTTP $api_status)"
fi

if [ "$frontend_status" = "200" ]; then
    echo -e "  ${GREEN}‚úì${NC} Frontend         ‚Üí http://localhost:4200"
else
    echo -e "  ${RED}‚úó${NC} Frontend         ‚Üí FAIL (HTTP $frontend_status)"
fi

postgres_status=$(docker exec explora_postgres pg_isready -U explora 2>/dev/null && echo "OK" || echo "FAIL")
if [ "$postgres_status" = "OK" ]; then
    echo -e "  ${GREEN}‚úì${NC} PostgreSQL       ‚Üí Ready"
else
    echo -e "  ${RED}‚úó${NC} PostgreSQL       ‚Üí FAIL"
fi

echo ""

# Mostrar logs si hay errores
if [ "$auth_status" != "200" ] || [ "$api_status" != "200" ] || [ "$frontend_status" != "200" ]; then
    warn "Algunos servicios no respondieron correctamente."
    echo "  Ver logs con: docker-compose logs -f"
    echo ""
fi

# Informaci√≥n de acceso
echo "============================================"
echo -e "${GREEN}‚úÖ Instalaci√≥n completada!${NC}"
echo "============================================"
echo ""
echo "üåê URLs de acceso:"
echo "  ‚Ä¢ Aplicaci√≥n Web:  http://localhost:4200"
echo "  ‚Ä¢ API Docs:        http://localhost:8000/docs"
echo "  ‚Ä¢ Auth Docs:       http://localhost:8001/docs"
echo ""
echo "üë§ Credenciales de Admin por defecto:"
echo "  ‚Ä¢ Usuario:    admin"
echo "  ‚Ä¢ Contrase√±a: admin123"
echo ""
echo "üìù Comandos √∫tiles:"
echo "  ‚Ä¢ Ver logs:          docker-compose logs -f"
echo "  ‚Ä¢ Detener:           docker-compose down"
echo "  ‚Ä¢ Reiniciar:         docker-compose restart"
echo "  ‚Ä¢ Health check:      ./scripts/health_check.sh"
echo ""
echo "üìö Documentaci√≥n:"
echo "  ‚Ä¢ README.md          - Gu√≠a completa"
echo "  ‚Ä¢ ARCHITECTURE.md    - Diagramas de arquitectura"
echo "  ‚Ä¢ CONTRIBUTING.md    - Gu√≠a de contribuci√≥n"
echo ""
echo -e "${BLUE}¬°Feliz desarrollo! üöÄüèîÔ∏è${NC}"
echo "============================================"
echo ""
